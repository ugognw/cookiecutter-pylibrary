variables:
  PIPELINE_NAME: 'Pipeline for branch: $CI_COMMIT_BRANCH'
  POETRY_VERSION: "1.5.1"
  PYTHON_VERSION: "3.11"
  POETRY_HOME: '$CI_PROJECT_DIR/opt/poetry'
  PATH: '$POETRY_HOME:$PATH'

workflow:
  name: '$PIPELINE_NAME'
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH

default:
  image: python:latest
  before_script:
    - python --version ; pip --version  # For debugging
    - python3 -m venv $POETRY_HOME
    - echo '----------Installing Poetry----------'
    - $POETRY_HOME/bin/pip install poetry==$POETRY_VERSION
    - echo '-----Finished Installing Poetry-----'
    - $POETRY_HOME/bin/poetry --version  # For debugging
    - poetry env info  # For debugging

stages:
  - test
  - quality
{%- if cookiecutter.coveralls == 'yes' %}
  - coveralls
{%- endif %}
  - poetry
  - finish

nox:
  stage: test
  name: Test $PYTHON_VERSION ($OS)
  image: $IMAGE
  before_script:
    - !reference [default, before_script]
{%- if cookiecutter.coveralls == 'yes' %}
    - curl -L https://coveralls.io/coveralls-linux.tar.gz | tar -xz
    - coverage --version
{%- endif %}
{%- if cookiecutter.codecov == 'yes' %}
    - curl -Os https://uploader.codecov.io/latest/linux/codecov
    - chmod +x codecov
{%- endif %}
  parallel:
    matrix:
      - PYTHON_VERSION:
          - 'pypy-3.10'
          - '3.10'
          - '3.11'
        OS:
          - ubuntu-latest
{%- if cookiecutter.test_on_windows == 'yes' %}
          - 'windows-latest'
{%- endif %}
{%- if cookiecutter.test_on_osx == 'yes' %}
          - 'macos-latest'
{%- endif %}
  rules:
    - if: $OS == 'ubuntu-latest' && $PYTHON_VERSION == 'pypy-3.10'
      variables:
        IMAGE: pypy:3.10-7.3.12-bookworm
    - if: $OS == 'ubuntu-latest' && $PYTHON_VERSION == '3.10'
      variables:
        IMAGE: python:3.10.12-bookworm
    - if: $OS == 'ubuntu-latest' && $PYTHON_VERSION == '3.11'
      variables:
        IMAGE: python:3.11.4-bookworm
    - if: $OS == 'windows-latest' && $PYTHON_VERSION == 'pypy-3.10'
      variables:
        IMAGE: pypy:3.10-7.3.12-windowsservercore-ltsc2022
    - if: $OS == 'windows-latest' && $PYTHON_VERSION == '3.10'
      variables:
        IMAGE: 'HELP'
    - if: $OS == 'windows-latest' && $PYTHON_VERSION == '3.11'
      variables:
        IMAGE: python:3.11.4-windowsservercore-ltsc2022
  script:
    - poetry install --only=nox
    - poetry run nox -s test-$PYTHON_VERSION
{%- if cookiecutter.coveralls == 'yes' %}
    - coveralls report coverage.xml --job-flag "$PYTHON_VERSION-$OS" --parallel --build-number $CI_PIPELINE_ID
{%- endif %}
{%- if cookiecutter.codecov == 'yes' %}
    - ./codecov -t $CODECOV_TOKEN
{%- endif %}
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - htmlcov/

{%- if cookiecutter.coveralls == 'yes' %}
coveralls-finish:
  stage: coveralls
  needs: nox
  script:
    - curl -L https://coveralls.io/coveralls-linux.tar.gz | tar -xz
    - coverage --version
    - coveralls done --carryforward "pypy-3.10-ubuntu-latest,3.10-ubuntu-latest,3.11-ubuntu-latest
{%- if cookiecutter.test_on_windows == 'yes' -%}
,pypy-3.10-windows-latest,3.10-windows-latest,3.11-windows-latest
{%- endif -%}
{%- if cookiecutter.test_on_osx == 'yes' -%}
,pypy-3.10-macos-latest,3.10-macos-latest,3.11-macos-latest
{%- endif -%}
" --build-number $CI_PIPELINE_ID
{%- endif %}

checks:
  needs: []
  stage: quality
  parallel:
    matrix:
      - NOX_SESSION: format_check
        POETRY_GROUPS: format,lint
      - NOX_SESSION: lint
        POETRY_GROUPS: lint
      - NOX_SESSION: type_check
        POETRY_GROUPS: type_check,main,dev
      - NOX_SESSION: docs
        POETRY_GROUPS: docs
{%- if cookiecutter.sphinx_doctest == 'yes' %}
      - NOX_SESSION: docs_test
        POETRY_GROUPS: docs
{%- endif %}
      - NOX_SESSION: docs_check_urls
        POETRY_GROUPS: docs
  script:
    - poetry install --only=nox,$POETRY_GROUPS
    - poetry run nox -s $NOX_SESSION

poetry-check:
  stage: poetry
  script:
    - poetry check

poetry-lock:
  stage: poetry
  script:
    - poetry lock --check

finish:
  script:
    - echo "Collect Coveralls parallel data"
