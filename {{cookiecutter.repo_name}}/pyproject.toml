[tool.poetry]
name = "{{ cookiecutter.distribution_name }}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.project_short_description }}"
authors = [
    "{{ cookiecutter.full_name }}"
    ]
license = "{{ cookiecutter.license }}"
readme = "README.rst"
repository = "https://{{ cookiecutter.repo_hosting_domain }}/{{ cookiecutter.repo_username }}/{{ cookiecutter.repo_name }}"
{%- if cookiecutter.sphinx_docs == 'yes' %}
documentation = "{{ cookiecutter.sphinx_docs_hosting }}"
{%- endif %}
keywords = [
    {% for keyword in cookiecutter.keywords.split(',') %}
    {{ keyword }},
    {{% endif }}
]
packages = [
    { include = "{{ cookiecutter.package_name }}", from = "src" }
]
include = [
    "AUTHORS.rst",
    "CHANGELOG.rst",
    "CONTRIBUTING.rst",
    "LICENSE",
    "README.rst",
{% if cookiecutter.version_manager == 'bump2version' -%}
    ".bumpversion.cfg",
{% endif -%}
    ".cookiecutterrc.",
    ".coveragerc.",
    ".editorconfig",
{% if cookiecutter.github_actions == 'yes' -%}
    ".github/workflows/github-actions.yml",
{% endif -%}
{% if cookiecutter.gitlab_ci_cd == 'yes' -%}
    "gitlab-ci.yml",
{% endif -%}
{% if cookiecutter.pre_commit == "yes" -%}
    ".pre-commit-config.yaml",
{% endif -%}
{% if cookiecutter.sphinx_docs == 'yes' and 'readthedocs' in cookiecutter.sphinx_docs_hosting -%}
    ".readthedocs.yml",
{% endif -%}
    "tox.ini"
    ]
classifiers = [
        # complete classifier list: http://pypi.python.org/pypi?%3Aaction=list_classifiers
        "Development Status :: 5 - Production/Stable",
        "Intended Audience :: Developers",
{%- if cookiecutter.license == "no" %}
{%- elif cookiecutter.license in ["BSD 2-Clause License", "BSD 3-Clause License"] %}
        "License :: OSI Approved :: BSD License",
{%- elif cookiecutter.license == "MIT license" %}
        "License :: OSI Approved :: MIT License",
{%- elif cookiecutter.license == "ISC license" %}
        "License :: OSI Approved :: ISC License (ISCL)",
{%- elif cookiecutter.license == "Apache Software License 2.0" %}
        "License :: OSI Approved :: Apache Software License",
{%- elif "LGPLv3+" in cookiecutter.license %}
        "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)"
{%- elif "LGPLv3" in cookiecutter.license %}
        "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)"
{%- elif "LGPLv2" in cookiecutter.license %}
        "License :: OSI Approved :: GNU Lesser General Public License v2 or later (LGPLv2+)"
{%- elif "LGPLv2" in cookiecutter.license %}
        "License :: OSI Approved :: GNU Lesser General Public License v2 (LGPLv2)"
{%- endif %}
        "Operating System :: Unix",
        "Operating System :: POSIX",
        "Operating System :: Microsoft :: Windows",
        "Programming Language :: Python",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3 :: Only",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Programming Language :: Python :: Implementation :: CPython",
        "Programming Language :: Python :: Implementation :: PyPy",
        # uncomment if you test on these interpreters:
        # "Programming Language :: Python :: Implementation :: IronPython",
        # "Programming Language :: Python :: Implementation :: Jython",
        # "Programming Language :: Python :: Implementation :: Stackless",
        "Topic :: Utilities",
{%- if cookiecutter.pypi_disable_upload == "yes" %}
        "Private :: Do Not Upload",
{%- endif %}
]
{%- if cookiecutter.command_line_interface != "no" %}

[tool.poetry.scripts]
{{ cookiecutter.command_line_interface_bin_name }} = '{{ cookiecutter.package_name }}.cli:main'
{%- endif %}

[tool.poetry.dependencies]
python = ">=3.10,<3.12"

[build-system]
requires = [
    "poetry-core>=1.0.0",
{% if cookiecutter.c_extension_support == 'cffi' %}
    "cffi>=1.0.0",
{% endif %}
]
build-backend = "poetry.core.masonry.api"

[tool.poetry.group.dev.dependencies]
black = "*"
pylint = "^2.15.0"
ruff = "*"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "^7.1.2"
tox = "^3.26.0"
coverage = "^7.2.7"

[tool.poetry.group.test]
optional = true

[tool.ruff.per-file-ignores]
"ci/*" = ["S"]

[tool.ruff]
extend-exclude = ["static", "ci/templates"]
ignore = [
    "RUF001", # ruff-specific rules ambiguous-unicode-character-string
    "S101", # flake8-bandit assert
    "S308", # flake8-bandit suspicious-mark-safe-usage
    "E501", # pycodestyle line-too-long
]
line-length = 140
select = [
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "E", # pycodestyle errors
    "EXE", # flake8-executable
    "F", # pyflakes
    "I", # isort
    "INT", # flake8-gettext
    "PIE", # flake8-pie
    "PLC", # pylint convention
    "PLE", # pylint errors
    "PT", # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "Q", # flake8-quotes
    "RSE", # flake8-raise
    "RUF", # ruff-specific rules
    "S", # flake8-bandit
    "UP", # pyupgrade
    "W", # pycodestyle warnings
]
src = ["src", "tests"]
target-version = "py311"

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.isort]
forced-separate = ["conftest"]
force-single-line = true

[tool.black]
line-length = 79
target-version = ["py311"]
{%- if cookiecutter.formatter_quote_style == "single" %}
skip-string-normalization = true

[tool.ruff.flake8-quotes]
inline-quotes = "single"
{%- endif %}
