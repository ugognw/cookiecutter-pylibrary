name: python

on:
  push:
  pull_request:
    types: [opened, ready_for_review, reopened, review_requested, synchronize]

env:
  POETRY_VERSION: "1.5.1"
  PYTHON_VERSION: "3.11"

jobs:
  test:
    name: {{ '${{ matrix.python-version }} (${{ matrix.os }})' }}
    runs-on: {{ '${{ matrix.os }}' }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        python-version: ["pypy-3.10", "3.10", "3.11"]
        os: ['ubuntu-latest'
{%- if cookiecutter.test_on_windows == 'yes' %}, 'windows-latest'
{%- endif %}
{%- if cookiecutter.test_on_osx == 'yes' %}, 'macos-latest'
{%- endif -%}
]
    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: pipx install poetry==${POETRY_VERSION}
      - name: Set up Python {{ '${{ matrix.python-version }}' }}
        uses: actions/setup-python@v4
        with:
          python-version: {{ '${{ matrix.python-version }}' }}
          cache: poetry
      - name: Install Nox
        run: poetry install --only=nox
      - name: Test with Nox
        run: poetry run nox -s test-{{ '${{ matrix.python-version }}' }}
      - name: Upload output file
        uses: actions/upload-artifact@v3
        with:
          name: coverage-files
          path: htmlcov/
{%- if cookiecutter.coveralls == 'yes' %}
      - name: Coveralls Parallel
        uses: coverallsapp/github-action@v2
        continue-on-error: true
        with:
          flag-name: {{ '${{ matrix.python-version }}-${{ matrix.os }}-latest' }}
          parallel: true
{%- endif %}
{%- if cookiecutter.codecov == 'yes' %}
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
          verbose: true
          flags: {{ '${{ matrix.python-version }}-${{ matrix.os }}-latest' }}
{%- endif %}
{%- if cookiecutter.codacy == 'yes' %}
      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@master
        with:
          verbose: true
          flags: {{ '${{ matrix.python-version }}-${{ matrix.os }}-latest' }}
{%- endif %}
  quality:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        job:
          - { nox-session: format_check, poetry-groups: "format,lint" }
          - { nox-session: lint, poetry-groups: "lint" }
          # type_check needs main and test dependencies for inline type annotations.
          - { nox-session: type_check, poetry-groups: "type_check,main,dev" }
          - { nox-session: docs, poetry-groups: "docs" }
          - { nox-session: docs_test, poetry-groups: "docs" }
          - { nox-session: docs_check_urls, poetry-groups: "docs" }
    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: pipx install poetry==${POETRY_VERSION}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: {{ '${{ env.PYTHON_VERSION }}' }}
          cache: poetry
      - name: Install Nox and group dependencies
        run: poetry install --only=nox,{{ '${{ matrix.job.poetry-groups }}' }}
      - name: Test with Nox
        run: poetry run nox -s {{ '${{ matrix.job.nox-session }}' }}
  poetry-check:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: pipx install poetry==${POETRY_VERSION}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: {{ '${{ env.PYTHON_VERSION }}' }}
      - name: Validate Poetry Configuration
        run: poetry check
      - name: Validate Lockfile Freshness
        run: poetry lock --check
{%- if cookiecutter.coveralls == 'yes' %}
  finish:
    needs: test
    if: {{ '${{ always() }}' }}
    runs-on: ubuntu-latest
    steps:
    - name: Coveralls Finished
      uses: coverallsapp/github-action@v2
      with:
        parallel-finished: true
        carryforward: "pypy-3.10-ubuntu-latest,3.10-ubuntu-latest,3.11-ubuntu-latest
{%- if cookiecutter.test_on_windows == 'yes' -%}
,pypy-3.10-windows-latest,3.10-windows-latest,3.11-windows-latest
{%- endif -%}
{%- if cookiecutter.test_on_osx == 'yes' -%}
,pypy-3.10-macos-latest,3.10-macos-latest,3.11-macos-latest
{%- endif -%}
"
{%- endif %}
